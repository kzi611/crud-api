{"ast":null,"code":"import React from'react';import{useReactTable}from'@tanstack/react-table';const Table=()=>{const data=[{id:1,name:'John',phone:'123-456-7890',email:'john.doe@example.com',status:'Active',action:'Edit'},{id:2,name:'Jane',phone:'987-654-3210',email:'jane.smith@example.com',status:'Inactive',action:'Delete'},{id:3,name:'Michael',phone:'555-123-4567',email:'michael.johnson@example.com',status:'Active',action:'Edit'}];const columns=React.useMemo(()=>[{Header:'ID User',accessor:'id'},{Header:'Name',accessor:'name'},{Header:'Phone',accessor:'phone'},{Header:'Email',accessor:'email'},{Header:'Status',accessor:'status'},{Header:'Action',accessor:'action'}],[]);const{getTableProps,getTableBodyProps,headerGroups,rows,prepareRow}=useReactTable({columns,data});return/*#__PURE__*/React.createElement(\"div\",{className:\"p-2\"},/*#__PURE__*/React.createElement(\"table\",getTableProps(),/*#__PURE__*/React.createElement(\"thead\",null,headerGroups.map(headerGroup=>/*#__PURE__*/React.createElement(\"tr\",headerGroup.getHeaderGroupProps(),headerGroup.headers.map(column=>/*#__PURE__*/React.createElement(\"th\",column.getHeaderProps(),column.render('Header')))))),/*#__PURE__*/React.createElement(\"tbody\",getTableBodyProps(),rows.map(row=>{prepareRow(row);return/*#__PURE__*/React.createElement(\"tr\",row.getRowProps(),row.cells.map(cell=>/*#__PURE__*/React.createElement(\"td\",cell.getCellProps(),cell.render('Cell'))));}))));};export default Table;","map":{"version":3,"names":["React","useReactTable","Table","data","id","name","phone","email","status","action","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","createElement","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"sources":["/Users/donhutkhavy/front-end/src/components/Table.jsx"],"sourcesContent":["import React from 'react';\nimport { useReactTable } from '@tanstack/react-table';\n\nconst Table = () => {\n  const data = [\n    {\n      id: 1,\n      name: 'John',\n      phone: '123-456-7890',\n      email: 'john.doe@example.com',\n      status: 'Active',\n      action: 'Edit',\n    },\n    {\n      id: 2,\n      name: 'Jane',\n      phone: '987-654-3210',\n      email: 'jane.smith@example.com',\n      status: 'Inactive',\n      action: 'Delete',\n    },\n    {\n      id: 3,\n      name: 'Michael',\n      phone: '555-123-4567',\n      email: 'michael.johnson@example.com',\n      status: 'Active',\n      action: 'Edit',\n    },\n  ];\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'ID User',\n        accessor: 'id',\n      },\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Phone',\n        accessor: 'phone',\n      },\n      {\n        Header: 'Email',\n        accessor: 'email',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n      },\n      {\n        Header: 'Action',\n        accessor: 'action',\n      },\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useReactTable({\n    columns,\n    data,\n  });\n\n  return (\n    <div className=\"p-2\">\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => (\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,aAAa,KAAQ,uBAAuB,CAErD,KAAM,CAAAC,KAAK,CAAGA,CAAA,GAAM,CAClB,KAAM,CAAAC,IAAI,CAAG,CACX,CACEC,EAAE,CAAE,CAAC,CACLC,IAAI,CAAE,MAAM,CACZC,KAAK,CAAE,cAAc,CACrBC,KAAK,CAAE,sBAAsB,CAC7BC,MAAM,CAAE,QAAQ,CAChBC,MAAM,CAAE,MACV,CAAC,CACD,CACEL,EAAE,CAAE,CAAC,CACLC,IAAI,CAAE,MAAM,CACZC,KAAK,CAAE,cAAc,CACrBC,KAAK,CAAE,wBAAwB,CAC/BC,MAAM,CAAE,UAAU,CAClBC,MAAM,CAAE,QACV,CAAC,CACD,CACEL,EAAE,CAAE,CAAC,CACLC,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,cAAc,CACrBC,KAAK,CAAE,6BAA6B,CACpCC,MAAM,CAAE,QAAQ,CAChBC,MAAM,CAAE,MACV,CAAC,CACF,CAED,KAAM,CAAAC,OAAO,CAAGV,KAAK,CAACW,OAAO,CAC3B,IAAM,CACJ,CACEC,MAAM,CAAE,SAAS,CACjBC,QAAQ,CAAE,IACZ,CAAC,CACD,CACED,MAAM,CAAE,MAAM,CACdC,QAAQ,CAAE,MACZ,CAAC,CACD,CACED,MAAM,CAAE,OAAO,CACfC,QAAQ,CAAE,OACZ,CAAC,CACD,CACED,MAAM,CAAE,OAAO,CACfC,QAAQ,CAAE,OACZ,CAAC,CACD,CACED,MAAM,CAAE,QAAQ,CAChBC,QAAQ,CAAE,QACZ,CAAC,CACD,CACED,MAAM,CAAE,QAAQ,CAChBC,QAAQ,CAAE,QACZ,CAAC,CACF,CACD,EACF,CAAC,CAED,KAAM,CACJC,aAAa,CACbC,iBAAiB,CACjBC,YAAY,CACZC,IAAI,CACJC,UACF,CAAC,CAAGjB,aAAa,CAAC,CAChBS,OAAO,CACPP,IACF,CAAC,CAAC,CAEF,mBACEH,KAAA,CAAAmB,aAAA,QAAKC,SAAS,CAAC,KAAK,eAClBpB,KAAA,CAAAmB,aAAA,SAAWL,aAAa,CAAC,CAAC,cACxBd,KAAA,CAAAmB,aAAA,cACGH,YAAY,CAACK,GAAG,CAACC,WAAW,eAC3BtB,KAAA,CAAAmB,aAAA,MAAQG,WAAW,CAACC,mBAAmB,CAAC,CAAC,CACtCD,WAAW,CAACE,OAAO,CAACH,GAAG,CAACI,MAAM,eAC7BzB,KAAA,CAAAmB,aAAA,MAAQM,MAAM,CAACC,cAAc,CAAC,CAAC,CAAGD,MAAM,CAACE,MAAM,CAAC,QAAQ,CAAM,CAC/D,CACC,CACL,CACI,CAAC,cACR3B,KAAA,CAAAmB,aAAA,SAAWJ,iBAAiB,CAAC,CAAC,CAC3BE,IAAI,CAACI,GAAG,CAACO,GAAG,EAAI,CACfV,UAAU,CAACU,GAAG,CAAC,CACf,mBACE5B,KAAA,CAAAmB,aAAA,MAAQS,GAAG,CAACC,WAAW,CAAC,CAAC,CACtBD,GAAG,CAACE,KAAK,CAACT,GAAG,CAACU,IAAI,eACjB/B,KAAA,CAAAmB,aAAA,MAAQY,IAAI,CAACC,YAAY,CAAC,CAAC,CAAGD,IAAI,CAACJ,MAAM,CAAC,MAAM,CAAM,CACvD,CACC,CAAC,CAET,CAAC,CACI,CACF,CACJ,CAAC,CAEV,CAAC,CAED,cAAe,CAAAzB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}